// Code generated by counterfeiter. DO NOT EDIT.
package parserfakes

import (
	"sync"

	"github.com/gsmcwhirter/go-util/v12/parser"
)

type FakeParser struct {
	IsCaseSensitiveStub        func() bool
	isCaseSensitiveMutex       sync.RWMutex
	isCaseSensitiveArgsForCall []struct {
	}
	isCaseSensitiveReturns struct {
		result1 bool
	}
	isCaseSensitiveReturnsOnCall map[int]struct {
		result1 bool
	}
	KnownCommandStub        func(string) bool
	knownCommandMutex       sync.RWMutex
	knownCommandArgsForCall []struct {
		arg1 string
	}
	knownCommandReturns struct {
		result1 bool
	}
	knownCommandReturnsOnCall map[int]struct {
		result1 bool
	}
	LeadCharStub        func() string
	leadCharMutex       sync.RWMutex
	leadCharArgsForCall []struct {
	}
	leadCharReturns struct {
		result1 string
	}
	leadCharReturnsOnCall map[int]struct {
		result1 string
	}
	LearnCommandStub        func(string)
	learnCommandMutex       sync.RWMutex
	learnCommandArgsForCall []struct {
		arg1 string
	}
	ParseCommandStub        func(string) (string, error)
	parseCommandMutex       sync.RWMutex
	parseCommandArgsForCall []struct {
		arg1 string
	}
	parseCommandReturns struct {
		result1 string
		result2 error
	}
	parseCommandReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeParser) IsCaseSensitive() bool {
	fake.isCaseSensitiveMutex.Lock()
	ret, specificReturn := fake.isCaseSensitiveReturnsOnCall[len(fake.isCaseSensitiveArgsForCall)]
	fake.isCaseSensitiveArgsForCall = append(fake.isCaseSensitiveArgsForCall, struct {
	}{})
	stub := fake.IsCaseSensitiveStub
	fakeReturns := fake.isCaseSensitiveReturns
	fake.recordInvocation("IsCaseSensitive", []interface{}{})
	fake.isCaseSensitiveMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeParser) IsCaseSensitiveCallCount() int {
	fake.isCaseSensitiveMutex.RLock()
	defer fake.isCaseSensitiveMutex.RUnlock()
	return len(fake.isCaseSensitiveArgsForCall)
}

func (fake *FakeParser) IsCaseSensitiveCalls(stub func() bool) {
	fake.isCaseSensitiveMutex.Lock()
	defer fake.isCaseSensitiveMutex.Unlock()
	fake.IsCaseSensitiveStub = stub
}

func (fake *FakeParser) IsCaseSensitiveReturns(result1 bool) {
	fake.isCaseSensitiveMutex.Lock()
	defer fake.isCaseSensitiveMutex.Unlock()
	fake.IsCaseSensitiveStub = nil
	fake.isCaseSensitiveReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeParser) IsCaseSensitiveReturnsOnCall(i int, result1 bool) {
	fake.isCaseSensitiveMutex.Lock()
	defer fake.isCaseSensitiveMutex.Unlock()
	fake.IsCaseSensitiveStub = nil
	if fake.isCaseSensitiveReturnsOnCall == nil {
		fake.isCaseSensitiveReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isCaseSensitiveReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeParser) KnownCommand(arg1 string) bool {
	fake.knownCommandMutex.Lock()
	ret, specificReturn := fake.knownCommandReturnsOnCall[len(fake.knownCommandArgsForCall)]
	fake.knownCommandArgsForCall = append(fake.knownCommandArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.KnownCommandStub
	fakeReturns := fake.knownCommandReturns
	fake.recordInvocation("KnownCommand", []interface{}{arg1})
	fake.knownCommandMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeParser) KnownCommandCallCount() int {
	fake.knownCommandMutex.RLock()
	defer fake.knownCommandMutex.RUnlock()
	return len(fake.knownCommandArgsForCall)
}

func (fake *FakeParser) KnownCommandCalls(stub func(string) bool) {
	fake.knownCommandMutex.Lock()
	defer fake.knownCommandMutex.Unlock()
	fake.KnownCommandStub = stub
}

func (fake *FakeParser) KnownCommandArgsForCall(i int) string {
	fake.knownCommandMutex.RLock()
	defer fake.knownCommandMutex.RUnlock()
	argsForCall := fake.knownCommandArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeParser) KnownCommandReturns(result1 bool) {
	fake.knownCommandMutex.Lock()
	defer fake.knownCommandMutex.Unlock()
	fake.KnownCommandStub = nil
	fake.knownCommandReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeParser) KnownCommandReturnsOnCall(i int, result1 bool) {
	fake.knownCommandMutex.Lock()
	defer fake.knownCommandMutex.Unlock()
	fake.KnownCommandStub = nil
	if fake.knownCommandReturnsOnCall == nil {
		fake.knownCommandReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.knownCommandReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeParser) LeadChar() string {
	fake.leadCharMutex.Lock()
	ret, specificReturn := fake.leadCharReturnsOnCall[len(fake.leadCharArgsForCall)]
	fake.leadCharArgsForCall = append(fake.leadCharArgsForCall, struct {
	}{})
	stub := fake.LeadCharStub
	fakeReturns := fake.leadCharReturns
	fake.recordInvocation("LeadChar", []interface{}{})
	fake.leadCharMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeParser) LeadCharCallCount() int {
	fake.leadCharMutex.RLock()
	defer fake.leadCharMutex.RUnlock()
	return len(fake.leadCharArgsForCall)
}

func (fake *FakeParser) LeadCharCalls(stub func() string) {
	fake.leadCharMutex.Lock()
	defer fake.leadCharMutex.Unlock()
	fake.LeadCharStub = stub
}

func (fake *FakeParser) LeadCharReturns(result1 string) {
	fake.leadCharMutex.Lock()
	defer fake.leadCharMutex.Unlock()
	fake.LeadCharStub = nil
	fake.leadCharReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeParser) LeadCharReturnsOnCall(i int, result1 string) {
	fake.leadCharMutex.Lock()
	defer fake.leadCharMutex.Unlock()
	fake.LeadCharStub = nil
	if fake.leadCharReturnsOnCall == nil {
		fake.leadCharReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.leadCharReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeParser) LearnCommand(arg1 string) {
	fake.learnCommandMutex.Lock()
	fake.learnCommandArgsForCall = append(fake.learnCommandArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.LearnCommandStub
	fake.recordInvocation("LearnCommand", []interface{}{arg1})
	fake.learnCommandMutex.Unlock()
	if stub != nil {
		fake.LearnCommandStub(arg1)
	}
}

func (fake *FakeParser) LearnCommandCallCount() int {
	fake.learnCommandMutex.RLock()
	defer fake.learnCommandMutex.RUnlock()
	return len(fake.learnCommandArgsForCall)
}

func (fake *FakeParser) LearnCommandCalls(stub func(string)) {
	fake.learnCommandMutex.Lock()
	defer fake.learnCommandMutex.Unlock()
	fake.LearnCommandStub = stub
}

func (fake *FakeParser) LearnCommandArgsForCall(i int) string {
	fake.learnCommandMutex.RLock()
	defer fake.learnCommandMutex.RUnlock()
	argsForCall := fake.learnCommandArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeParser) ParseCommand(arg1 string) (string, error) {
	fake.parseCommandMutex.Lock()
	ret, specificReturn := fake.parseCommandReturnsOnCall[len(fake.parseCommandArgsForCall)]
	fake.parseCommandArgsForCall = append(fake.parseCommandArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ParseCommandStub
	fakeReturns := fake.parseCommandReturns
	fake.recordInvocation("ParseCommand", []interface{}{arg1})
	fake.parseCommandMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeParser) ParseCommandCallCount() int {
	fake.parseCommandMutex.RLock()
	defer fake.parseCommandMutex.RUnlock()
	return len(fake.parseCommandArgsForCall)
}

func (fake *FakeParser) ParseCommandCalls(stub func(string) (string, error)) {
	fake.parseCommandMutex.Lock()
	defer fake.parseCommandMutex.Unlock()
	fake.ParseCommandStub = stub
}

func (fake *FakeParser) ParseCommandArgsForCall(i int) string {
	fake.parseCommandMutex.RLock()
	defer fake.parseCommandMutex.RUnlock()
	argsForCall := fake.parseCommandArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeParser) ParseCommandReturns(result1 string, result2 error) {
	fake.parseCommandMutex.Lock()
	defer fake.parseCommandMutex.Unlock()
	fake.ParseCommandStub = nil
	fake.parseCommandReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeParser) ParseCommandReturnsOnCall(i int, result1 string, result2 error) {
	fake.parseCommandMutex.Lock()
	defer fake.parseCommandMutex.Unlock()
	fake.ParseCommandStub = nil
	if fake.parseCommandReturnsOnCall == nil {
		fake.parseCommandReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.parseCommandReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeParser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isCaseSensitiveMutex.RLock()
	defer fake.isCaseSensitiveMutex.RUnlock()
	fake.knownCommandMutex.RLock()
	defer fake.knownCommandMutex.RUnlock()
	fake.leadCharMutex.RLock()
	defer fake.leadCharMutex.RUnlock()
	fake.learnCommandMutex.RLock()
	defer fake.learnCommandMutex.RUnlock()
	fake.parseCommandMutex.RLock()
	defer fake.parseCommandMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeParser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ parser.Parser = new(FakeParser)
